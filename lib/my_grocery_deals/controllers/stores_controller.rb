# This file was automatically generated by APIMATIC BETA v2.0 on 10/09/2015

module MyGroceryDeals
  class StoresController

    # Initializer with authentication and configuration parameters
    def initialize(version, x_api_key)
        @version = version;
        @x_api_key = x_api_key;
    end

    # TODO: type endpoint description here
    # @param [String] distance Optional parameter: Radius to search
    # @param [String] ip Optional parameter: End user's ip address
    # @param [Numeric] latitude Optional parameter: End user's latitude
    # @param [Numeric] longitude Optional parameter: End user's longitude
    # @param [String] user Optional parameter: Unique and persistent identifier for the end-user for which the request is being made. 
    # @param [String] zip Optional parameter: End user's zip code
    # @return HttpApiMygrocerydealsComV2DealSearchResponse response from the API call
    def get_stores_nearby distance: nil, ip: nil, latitude: nil, longitude: nil, user: nil, zip: nil
      # the base uri for api requests
      query_builder = Configuration::BASE_URI.dup % [@version]

      # prepare query string for API call
      query_builder << "/stores/nearby"

      # process optional query parameters
      query_builder = APIHelper.append_url_with_query_parameters query_builder, {
        "distance" => distance,
        "ip" => ip,
        "latitude" => latitude,
        "longitude" => longitude,
        "user" => user,
        "zip" => zip,
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        "user-agent" => "APIMATIC 2.0",
        "accept" => "application/json",
        "X-Api-Key" => @x_api_key
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers:headers

      #Error handling using HTTP status codes
      if !(response.code.between?(200,206)) # [200,206] = HTTP OK
        raise APIException.new "HTTP Response Not OK", response.code, response.raw_body
      end

      response.body
    end

  end
end
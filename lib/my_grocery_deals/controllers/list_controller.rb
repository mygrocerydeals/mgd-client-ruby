# This file was automatically generated by APIMATIC BETA v2.0 on 10/09/2015

module MyGroceryDeals
  class ListController

    # Initializer with authentication and configuration parameters
    def initialize(version, x_api_key)
        @version = version;
        @x_api_key = x_api_key;
    end

    # Update a particular shopping list item
    # @param [Numeric] item_id Required parameter: identifier for an item within the user's shopping list
    # @param [String] list_id Required parameter: unique identifier for the current user
    # @return void response from the API call
    def create_list_item_by_list_id_and_item_id item_id, list_id
      # the base uri for api requests
      query_builder = Configuration::BASE_URI.dup % [@version]

      # prepare query string for API call
      query_builder << "/list/{listId}/item/{itemId}"

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        "itemId" => item_id,
        "listId" => list_id,
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        "user-agent" => "APIMATIC 2.0",
        "X-Api-Key" => @x_api_key
      }

      # invoke the API call request to fetch the response
      response = Unirest.post query_url, headers:headers

      #Error handling using HTTP status codes
      if !(response.code.between?(200,206)) # [200,206] = HTTP OK
        raise APIException.new "HTTP Response Not OK", response.code, response.raw_body
      end
    end

    # Remove a particular item from the shopping list
    # @param [Numeric] item_id Required parameter: identifier for an item within the user's shopping list
    # @param [String] list_id Required parameter: unique identifier for the current user
    # @return void response from the API call
    def delete_list_item_by_list_id_and_item_id item_id, list_id
      # the base uri for api requests
      query_builder = Configuration::BASE_URI.dup % [@version]

      # prepare query string for API call
      query_builder << "/list/{listId}/item/{itemId}"

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        "itemId" => item_id,
        "listId" => list_id,
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        "user-agent" => "APIMATIC 2.0",
        "X-Api-Key" => @x_api_key
      }

      # invoke the API call request to fetch the response
      response = Unirest.delete query_url, headers:headers

      #Error handling using HTTP status codes
      if !(response.code.between?(200,206)) # [200,206] = HTTP OK
        raise APIException.new "HTTP Response Not OK", response.code, response.raw_body
      end
    end

    # Return a specific shopping list item
    # @param [Numeric] item_id Required parameter: identifier for an item within the user's shopping list
    # @param [String] list_id Required parameter: unique identifier for the current user
    # @return void response from the API call
    def list_item_by_list_id_and_item_id item_id, list_id
      # the base uri for api requests
      query_builder = Configuration::BASE_URI.dup % [@version]

      # prepare query string for API call
      query_builder << "/list/{listId}/item/{itemId}"

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        "itemId" => item_id,
        "listId" => list_id,
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        "user-agent" => "APIMATIC 2.0",
        "X-Api-Key" => @x_api_key
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers:headers

      #Error handling using HTTP status codes
      if !(response.code.between?(200,206)) # [200,206] = HTTP OK
        raise APIException.new "HTTP Response Not OK", response.code, response.raw_body
      end
    end

    # Add new items to a shopping list, creating it if it does not already
    # exist
    # @param [String] list_id Required parameter: unique identifier for the current user
    # @return void response from the API call
    def update_list_by_list_id list_id
      # the base uri for api requests
      query_builder = Configuration::BASE_URI.dup % [@version]

      # prepare query string for API call
      query_builder << "/list/{listId}"

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        "listId" => list_id,
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        "user-agent" => "APIMATIC 2.0",
        "X-Api-Key" => @x_api_key
      }

      # invoke the API call request to fetch the response
      response = Unirest.put query_url, headers:headers

      #Error handling using HTTP status codes
      if !(response.code.between?(200,206)) # [200,206] = HTTP OK
        raise APIException.new "HTTP Response Not OK", response.code, response.raw_body
      end
    end

    # Delete the shopping list and all its items
    # @param [String] list_id Required parameter: unique identifier for the current user
    # @return void response from the API call
    def delete_list_by_list_id list_id
      # the base uri for api requests
      query_builder = Configuration::BASE_URI.dup % [@version]

      # prepare query string for API call
      query_builder << "/list/{listId}"

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        "listId" => list_id,
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        "user-agent" => "APIMATIC 2.0",
        "X-Api-Key" => @x_api_key
      }

      # invoke the API call request to fetch the response
      response = Unirest.delete query_url, headers:headers

      #Error handling using HTTP status codes
      if !(response.code.between?(200,206)) # [200,206] = HTTP OK
        raise APIException.new "HTTP Response Not OK", response.code, response.raw_body
      end
    end

    # Return a user's shopping list
    # @param [String] list_id Required parameter: unique identifier for the current user
    # @return void response from the API call
    def list_by_list_id list_id
      # the base uri for api requests
      query_builder = Configuration::BASE_URI.dup % [@version]

      # prepare query string for API call
      query_builder << "/list/{listId}"

      # process optional query parameters
      query_builder = APIHelper.append_url_with_template_parameters query_builder, {
        "listId" => list_id,
      }

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        "user-agent" => "APIMATIC 2.0",
        "X-Api-Key" => @x_api_key
      }

      # invoke the API call request to fetch the response
      response = Unirest.get query_url, headers:headers

      #Error handling using HTTP status codes
      if !(response.code.between?(200,206)) # [200,206] = HTTP OK
        raise APIException.new "HTTP Response Not OK", response.code, response.raw_body
      end
    end

    # Create a new shopping list, automatically assigning it a unique identifier
    # @return void response from the API call
    def update_list
      # the base uri for api requests
      query_builder = Configuration::BASE_URI.dup % [@version]

      # prepare query string for API call
      query_builder << "/list"

      # validate and preprocess url
      query_url = APIHelper.clean_url query_builder

      # prepare headers
      headers = {
        "user-agent" => "APIMATIC 2.0",
        "X-Api-Key" => @x_api_key
      }

      # invoke the API call request to fetch the response
      response = Unirest.put query_url, headers:headers

      #Error handling using HTTP status codes
      if !(response.code.between?(200,206)) # [200,206] = HTTP OK
        raise APIException.new "HTTP Response Not OK", response.code, response.raw_body
      end
    end

  end
end